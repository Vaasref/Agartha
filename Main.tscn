[gd_scene load_steps=11 format=2]

[ext_resource path="res://MenuEntry.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Button



func _on_pressed():
	Agartha.step()
"

[sub_resource type="GDScript" id=2]
script/source = "extends Button



func _on_pressed():
	Agartha.Timeline.roll(1)
"

[sub_resource type="GDScript" id=3]
script/source = "extends Button


func _ready():
	self.call_deferred(\"connect_to_timeline\")

func connect_to_timeline():
	Agartha.Timeline.connect(\"skip_change\", self, \"_on_skip_change\")

func _on_skip_change(active, _priority):
	self.pressed = active

func _on_pressed():
	Agartha.Timeline.roll(-1)


func _on_toggled(button_pressed):
	if button_pressed:
		Agartha.Timeline.start_skipping(0)
	else:
		Agartha.Timeline.end_skipping()
	
"

[sub_resource type="GDScript" id=4]
script/source = "extends VBoxContainer

export var menu_entry:PackedScene

func _ready():
	var _o = Agartha.connect(\"menu\", self, \"_on_menu\")

func _step():
	clear_children()

func _restore(_state):
	clear_children()

func _on_menu(choices, _params):
	clear_children()
	var i = 0
	for e in choices:
		var entry = menu_entry.instance()
		entry.set_text(e)
		entry.choice = i
		self.add_child(entry)
		i += 1

func clear_children():
	for c in self.get_children():
		self.call_deferred('remove_child', c)

func remove_child(node):
	if node in self.get_children():
		.remove_child(node)
"

[sub_resource type="StyleBoxFlat" id=5]
bg_color = Color( 0, 0, 0, 0.333333 )

[sub_resource type="GDScript" id=6]
script/source = "extends PanelContainer


func _ready():
	var _o = Agartha.connect(\"say\", self, \"_on_say\")

func _on_say(_character, _text, _params):
	print(\"say %s :   '%s'\" % [_character, _text])
	self.visible = true

func _step():
	self.visible = false
"

[sub_resource type="GDScript" id=7]
script/source = "extends Label



func _ready():
	var _o = Agartha.connect(\"say\", self, \"_on_say\")
	self.visible = false

func _on_say(character, _text, _params):
	if character:
		self.text = character
		self.visible = true
	else:
		self.visible = false
"

[sub_resource type="GDScript" id=8]
script/source = "extends RichTextLabel



func _ready():
	var _o = Agartha.connect(\"say\", self, \"_on_say\")

func _on_say(_character, text, _params):
	self.text = text
"

[sub_resource type="GDScript" id=9]
script/source = "extends Dialogue


func _ready():
	pass

func frag_1():
	fragment_start(\"frag_1\")
	
	shard(\"test_shard\", false)
	
	say(\"\", \"frag_1 step %s\" % self.execution_stack[0].step_counter)
	step()
	
	say(\"\", \"frag_1 step %s\" % self.execution_stack[0].step_counter)
	step()
	
	say(\"\", \"frag_1 step %s\" % self.execution_stack[0].step_counter)
	step()
	
	say(\"\", \"frag_1 step %s\" % self.execution_stack[0].step_counter)
	step()
	
	say(\"\", \"frag_1 step %s\" % self.execution_stack[0].step_counter)
	step()
	
	say(\"\", \"frag_1 step %s\" % self.execution_stack[0].step_counter)
	step()
	
	var choice = menu([\"Entry 1\", \"Entry 2\", \"Entry 3\"])
	
	if(cond(choice == 0)):
		say(\"\", \"choice 0\")
	elif(cond(choice == 1)):
		say(\"\", \"choice 1\")
	else:
		say(\"\", \"choice 2\")
	step()
	
	fragment_end()


func frag_2():
	fragment_start(\"frag_2\")
	
	say(\"\", \"frag_2 step 0\")
	step()
	
	say(\"\", \"frag_2step 1\")
	step()
	
	say(\"\", \"frag_2step 2\")
	step()
	
	say(\"\", \"frag_2step 3\")
	step()
	
	say(\"\", \"frag_2step 4\")
	step()
	
	say(\"\", \"frag_2step 5\")
	step()
	
	fragment_end()
"

[node name="Main" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false,
"_edit_vertical_guides_": [ 51.1864 ]
}

[node name="Button" type="Button" parent="."]
margin_left = 50.127
margin_top = 161.467
margin_right = 90.127
margin_bottom = 181.467
text = "Step"
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button2" type="Button" parent="."]
margin_left = 50.127
margin_top = 208.296
margin_right = 119.127
margin_bottom = 228.296
text = "Roll back"
script = SubResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button3" type="Button" parent="."]
margin_left = 50.127
margin_top = 250.634
margin_right = 137.127
margin_bottom = 270.634
text = "Roll forward"
script = SubResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button4" type="Button" parent="."]
margin_left = 50.127
margin_top = 297.634
margin_right = 137.127
margin_bottom = 317.634
toggle_mode = true
text = "Skip"
script = SubResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchor_left = 0.2
anchor_top = 0.2
anchor_right = 0.8
anchor_bottom = 0.6
margin_top = 1.05945
margin_bottom = 1.05945
script = SubResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}
menu_entry = ExtResource( 1 )

[node name="Panel" type="PanelContainer" parent="."]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
grow_vertical = 0
custom_styles/panel = SubResource( 5 )
script = SubResource( 6 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MarginContainer" type="MarginContainer" parent="Panel"]
margin_right = 1024.0
margin_bottom = 140.0
custom_constants/margin_right = 200
custom_constants/margin_top = 20
custom_constants/margin_left = 200
custom_constants/margin_bottom = 20

[node name="VBoxContainer" type="VBoxContainer" parent="Panel/MarginContainer"]
margin_left = 200.0
margin_top = 20.0
margin_right = 824.0
margin_bottom = 120.0

[node name="Label" type="Label" parent="Panel/MarginContainer/VBoxContainer"]
visible = false
margin_right = 1010.0
margin_bottom = 14.0
text = "Character"
script = SubResource( 7 )

[node name="RichTextLabel" type="RichTextLabel" parent="Panel/MarginContainer/VBoxContainer"]
margin_right = 624.0
margin_bottom = 100.0
rect_min_size = Vector2( 0, 100 )
script = SubResource( 8 )

[node name="DialogueTest" type="Node" parent="."]
script = SubResource( 9 )
default_fragment = "frag_1"
autorun = true
[connection signal="pressed" from="Button" to="Button" method="_on_pressed"]
[connection signal="pressed" from="Button2" to="Button2" method="_on_pressed"]
[connection signal="pressed" from="Button3" to="Button3" method="_on_pressed"]
[connection signal="toggled" from="Button4" to="Button4" method="_on_toggled"]
